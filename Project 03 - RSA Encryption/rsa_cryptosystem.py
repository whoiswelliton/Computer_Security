# -*- coding: utf-8 -*-
"""RSA Cryptosystem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HlfUgCntw9N8nBkHe_AVzWhyTfxLpcuE

**RSA Cryptosystem**
"""

from google.colab import drive
drive.mount('/content/drive')

pip install pycryptodome

from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES, PKCS1_OAEP
from PIL import Image

"""# PROCESS"""

assymetric = Image.open("/content/drive/My Drive/Cryptowork/asymmetric.gif")
assymetric

"""# KEYS

- RECEIVER KEYS
"""

key = RSA.generate(2048)

key

key.has_private()

#exportando a chave privada utilizando o formato PEM de codificação de texto
private_key = key.export_key(format='PEM', pkcs=1)
file_out = open("/content/drive/My Drive/Cryptowork/privateRSA.pem", "wb")
file_out.write(private_key)
file_out.close()

private_key

#exportando a chave pública utilizando o formato OpenSSH de codificação de texto
public_key = key.publickey().export_key('OpenSSH')
file_out = open("/content/drive/My Drive/Cryptowork/receiverRSA.pem", "wb")
file_out.write(public_key)
file_out.close()

public_key

"""- SENDER KEYS"""

#chave do recebedor
recipient_key = RSA.import_key(open("/content/drive/My Drive/Cryptowork/receiverRSA.pem").read())

#chave simétrica randomica
session_key = get_random_bytes(16)

print(recipient_key)
print(session_key)

"""# ENCRYPTING (SENDER)

Encriptação Híbrida
- RSA com PKCS1 para encriptação assimétrica de uma chave simétrica com AES
- #PKCS1_OAP = cifra assimétrica baseando em RSA e OAEP padding
"""

data = "Mensagem ultra super secreta usando (R)ivest–(S)hamir–(A)dleman Cryptosystem".encode("utf-8")

#Criando o objeto para encriptar dados usando a chave pública (RSA) do recebedor
cipher_rsa = PKCS1_OAEP.new(recipient_key)

#Encriptando a chave simétrica utilizando o objeto cifrado RSA
enc_session_key = cipher_rsa.encrypt(session_key)

enc_session_key

# Encriptando os dados com a chave simétrica AES
cipher_aes = AES.new(session_key, AES.MODE_EAX)
ciphertext, tag = cipher_aes.encrypt_and_digest(data)   #Texto cifrado + tag MAC

encryptedMsg = enc_session_key, cipher_aes.nonce, tag, ciphertext
print(encryptedMsg )

#Escrevendo no arquivo: chave simétrica encriptada com RSA, Tag, dados cifrados
file_out = open("/content/drive/My Drive/Cryptowork/encrypted_data1.bin", "wb")
[ file_out.write(x) for x in (enc_session_key, cipher_aes.nonce, tag, ciphertext) ]
file_out.close()

"""# DECRYPTING (RECEIVER)

O recebedor possui a chave RSA privada e os dados encriptados
"""

#Recebedor acessando sua chave privada
private_key = RSA.import_key(open("/content/drive/My Drive/Cryptowork/privateRSA.pem").read())

#Carregando arquivo encriptado recebido
file_in = open("/content/drive/My Drive/Cryptowork/encrypted_data1.bin", "rb")
enc_session_key, nonce, tag, ciphertext = [ file_in.read(x) for x in (private_key.size_in_bytes(), 16, 16, -1) ]

#Criando o objeto para decriptar dados usando a chave PRIVADA (RSA) do recebedor
cipher_rsa = PKCS1_OAEP.new(private_key)

#Decriptando a chave simétrica urilizando o objeto  cifrado RSA
session_key = cipher_rsa.decrypt(enc_session_key)

# Decriptando os dados com a chave simétrica AES
cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)
data1 = cipher_aes.decrypt_and_verify(ciphertext, tag)

print(data1.decode("utf-8"))