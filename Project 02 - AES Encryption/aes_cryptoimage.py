# -*- coding: utf-8 -*-
"""AES Cryptoimage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lIWT2BBMNq-mT9tIDWylLQizoo-X6vZ8
"""

from google.colab import drive
drive.mount('/content/drive')

Path = "/content/drive/My Drive/Cryptowork"

pip install pycryptodome

from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad

import os
import os.path

import base64
from base64 import b64decode
from base64 import decodestring

from PIL import Image
import cv2

import io
from io import BytesIO, StringIO

"""# SYMMETRIC ENCRYPTION"""

symetric = Image.open("/content/drive/My Drive/Cryptowork/symmetric.png")
symetric

"""# DATA PREPARATION"""

#gerando as 2 chaves simétricas

KEY1 = get_random_bytes(16)  #blocos de 16 bytes = 128 bits
KEY2 = get_random_bytes(32)  #blocos de 32 bytes = 256 bits

#vetor de inicialização
IV = get_random_bytes(16)    #128 bits

print(KEY1)
print(KEY2)
print(IV)

#modos de operação para blocos simétricos

Mode1 = AES.MODE_ECB        #Electronic CodeBook   
Mode2 = AES.MODE_CBC        #Ciphertext Block Chaining

#Carregando a imagem e convertendo para base64

with open("/content/drive/My Drive/Cryptowork/teste2.jpg", "rb") as image2string:
    converted_string = base64.b64encode(image2string.read())
print(converted_string [:200])
  
with open('encode.bin', "wb") as file:
    file.write(converted_string)

#data = IMG_STR
data1 = converted_string

"""# ENCRYPTING

**ECB e CBC com 128/256**
"""

#MODO1 = ECB COM 128 E 256
cipher1 = AES.new(KEY1, Mode1)
cipher2 = AES.new(KEY2, Mode1)

#MODO2 = CBC COM 128 E 256
cipher3 = AES.new(KEY1, Mode2, IV)
cipher4 = AES.new(KEY2, Mode2, IV)

#encriptando o texto e armazenando na variável

#ECB
ENC_txt1 = cipher1.encrypt(pad (data1, 16))
ENC_txt2 = cipher2.encrypt(pad (data1, 32))

#CBC
ENC_txt3 = cipher3.encrypt(pad (data1, 16))
ENC_txt4 = cipher4.encrypt(pad (data1, 32))

print(ENC_txt1 [:100])
print(ENC_txt2 [:100])
print(ENC_txt3 [:100])
print(ENC_txt4 [:100])

"""#DECRYPTING"""

#ECB
c1 = AES.new(KEY1, Mode1)
c2 = AES.new(KEY2, Mode1)

#CBC
c3 = AES.new(KEY1, Mode2, IV)
c4 = AES.new(KEY2, Mode2, IV)

#ECB
DEC_txt1 = unpad(c1.decrypt(ENC_txt1), 16)
DEC_txt2 = unpad(c2.decrypt(ENC_txt2), 32)

#CBC
DEC_txt3 = unpad(c3.decrypt(ENC_txt3), 16)
DEC_txt4 = unpad(c4.decrypt(ENC_txt4), 32)

print(DEC_txt1[:200])
print(DEC_txt2[:200])
print(DEC_txt3[:200])
print(DEC_txt4[:200])

"""# RESULTS"""

#Salvando os resultados
with open("/content/drive/My Drive/Cryptowork/ECB128.jpg", "wb") as f:
    f.write(base64.decodebytes(DEC_txt1))

with open("/content/drive/My Drive/Cryptowork/ECB256.jpg", "wb") as f:
    f.write(base64.decodebytes(DEC_txt2))

with open("/content/drive/My Drive/Cryptowork/CBC128.jpg", "wb") as f:
    f.write(base64.decodebytes(DEC_txt3))

with open("/content/drive/My Drive/Cryptowork/CBC256.jpg", "wb") as f:
    f.write(base64.decodebytes(DEC_txt4))

#Exibindo 2 dos 4 arquivos decriptados
im1 = Image.open("/content/drive/My Drive/Cryptowork/ECB128.jpg")
im2 = Image.open("/content/drive/My Drive/Cryptowork/CBC256.jpg")

im1